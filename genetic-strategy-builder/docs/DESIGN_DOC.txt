

About:

Do you hate wading through tons and tons of trading setups, only to feel like you've accomplished nothing at the end of
the day? Well now you can do something different to feel like you've accomplished nothing! Introducing 'Genetic Strategy
Builder', which cuts down on backtesting time by throwing together random trading algorithms and removing the bad ones
from the gene pool directly! This is not at all dark in any way!

There will be X main parts of Genetic Strategy Builder



1) The main part: the genetic algorithm for creating an optimized trading strategy. This will download historical data
for a given ticker or set of tickers, combine the dataset with a huge number of technical indicators, and randomly throw
together sets of technical indicators and see how well it works trading on a ticker or a set of tickers. Each technical
indicator will have basic buy and sell signal rules set for them to generate the buy and sell signals.

Parts of genetic algorithm that will be randomly optimized:
-Which technical indicators to use
-The number of technical indicators chosen
-The percentage of the technical indicators that need to agree to make a buy or sell decision
-(maybe more)

Features required:
-Saving and Loading - Be able to save and load the models and all its stats. See if random generator states can be saved
and restored too. Save EVERYTHING in a single ZIP package as a .SAV file to make things easier and cleaner.
-Easy to understand display of stats - Make sure everything is very organized and is displayed in a clear way.



2) This part expands on the first part by adding in the ability to change the parameters used by the technical
indicators and will also add additional buy and sell triggers for each technical indicator. Consider now how choosing
a buy condition for an indicator can be a parameter the genetic algorithm itself can optimize. These variations will be
added in as completely different indicators. This should drastically expand the pool of possible candidates as many
parameters will be available to be entered into consideration.

2 Different DNA components:
SMA 20 - Buy when price is above SMA, sell when price is below
SMA 50 - Buy when SMA is 10% below the price or above, sell with inverted rules

NOTE: For this part, care will need to be taken to ensure a single indicator doesn't come to dominate the DNA chain.
Limiting how many of each type can exist in a single member could help prevent this issue.



3) Optimize (break out into more steps once this step is reached):

-Create rules to prevent the algorithm from getting stuck in a local min or max.
-Implement an optimizer (like ADAM) to help the algorithm find the correct values.
-Now that we are this far, consider implementing more technical indicators from other libraries or implementing
advanced indicators yourself.
-If not implemented yet, consider a way to optimize how an indicator chooses when to buy and when to sell.



4) Plot out the buys and sells on a graph. Once you get going you'll want to see the historical data and also see what
the current buy or sell decision is. Update the graph as the program runs to display the most fit version.



5) Multithread the algorithm. Run an instance per core, with one extra 'master' thread
to run a genetic algorithm where the other running genetic models feed their members into the master model. Once this is
done, feed either members of this model back into the other models or add a certain number of higher performing single
technical indicators into randomly generated members from the master to the non-master genetic models.



6) Create new indicators out of highly rated trading strategies generated by this program. Also program some special
indicators that aren't available in Python libraries as indicators here. Look at TradingView for open source
indicator code.



7) Look into getting historical data for fundamental data to add to the dataset as a TA. Create indicator decision
functions similar to the others, with variable trade decision abilities.



8) Now that we are this far, what could be done better or what could be expanded upon in a meaningful way? Think of
pain points that can be smoothed over and rework things that can be reworked. Also consider making the algorithm even
more generic than it currently is at this point. Can you just grab random stocks and start there?

